/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>
 
#define CMK 0
#define SYM 1
#define NUM 2
#define FUN 3
#define NAV 4

&caps_word {
   continue-list = <UNDERSCORE MINUS BACKSPACE>;
};


/ {

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_wf_tab {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // W + F
            key-positions = <2 3>;
            bindings = <&kp TAB>;
        };
        combo_uy_del {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // U + Y
            key-positions = <8 9>;
            bindings = <&kp DEL>;
        };
        combo_gm_capsword {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <100>;
            // G + M
            key-positions = <17 18>;
            bindings = <&caps_word>;
        };
        combo_xc_ctrl {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // Z + X
            key-positions = <26 27>;
            bindings = <&sk LCTL>;
        };
        combo_commadot_shift {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // , + . = shift
            key-positions = <32 33>;
            bindings = <&skq LSHFT>;
        };
        combo_cmd {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // SYM + SPC = CMD
            key-positions = <39 40>;
            bindings = <&sk LCMD>;
        };
        combo_opt {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // NUM + ENT = OPT
            key-positions = <43 44>;
            bindings = <&sk LALT>;
        };
        combo_opt_alt {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&sk LALT>;
        };
        combo_cmd_alt {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&sk LCMD>;
        };
        combo_ent {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <80>;
            // SPC + BSPC = ENT
            key-positions = <40 43>;
            bindings = <&kp RET>;
        };
    };
};



/ {
        keymap {
                compatible = "zmk,keymap";
                colemak_layer {
                        bindings = <
   &kp TAB  &kp Q &kp W &kp F &kp P &kp B &kp J &kp L &kp U &kp Y &kp SQT &kp ESC
   &kp LCTL &kp A &kp R &kp S &kp T &kp G &kp M &kp N &kp E &kp I &kp O   &kp RET    
   &kp LCMD &kp Z &kp X &kp C &kp D &kp V &kp K &kp H &kp COMMA &kp DOT &kp SLASH &mo FUN  
   &kp LALT &kp LCTL &kp LSHFT &mo SYM &kp SPACE &none &none &lt NAV BSPC &mo NUM &kp LALT &none &none
                        >;
                };
                symbol_layer {
                        bindings = <
   &trans &none &kp BSLH  &kp PRCNT &kp DLLR &none &none &kp CARET &kp LBKT &kp RBKT &none &trans
   &trans &kp STAR &kp LPAR  &kp RPAR  &kp COLON &none &none &kp SEMI  &kp LBRC &kp RBRC &none &trans
   &trans &none    &kp GRAVE &kp AT    &kp AMPS &none &none &kp HASH  &kp LT   &kp GT   &none &trans
   &trans &trans &trans &trans &kp SPACE &none &none &kp BSPC &kp ESC &trans &trans &trans
                        >;
                };
                number_layer {
                        bindings = <
   &trans &none &kp N4 &kp N5 &kp N6 &none &none &kp PIPE &kp MINUS &kp SLASH &none &trans
   &trans &kp DOT &kp N1 &kp N2 &kp N3 &none &none &kp DQT &kp UNDER &kp EQUAL &none &trans
   &trans &kp TILDE &kp N7 &kp N8 &kp N9 &none &none &kp PLUS &kp QMARK  &kp EXCL &none &trans
   &trans &trans &trans &trans &kp N0 &kp SPACE &none &none &kp BSPC  &trans &trans &trans 
                        >;
                };
                fun_layer {
                        bindings = <
   &trans &none    &kp F4 &kp F5 &kp F6 &kp F10 &bt BT_SEL 0 &bt BT_SEL 1  &out OUT_USB &out OUT_BLE &bt BT_CLR &trans
   &trans &kp CAPS &kp F1 &kp F2 &kp F3 &kp F11 &kp K_MUTE   &kp C_VOL_DN  &kp C_VOL_UP &kp C_BRI_DN &kp C_BRI_UP &trans
   &trans &none    &kp F7 &kp F8 &kp F9 &kp F12 &none        &none         &none        &none        &none      &trans
   &trans &trans &trans &trans &trans &none &none &trans &trans &trans &trans &trans
                        >;
                };
                nav_layer {
                        bindings = <
   &none &none &none &mmv MOVE_UP &none &none &mkp MB1 &mkp MB2    &mkp MB3     &mwh SCROLL_UP     &mwh SCROLL_DOWN     &none  
   &none &none &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &none &trans 
   &none &none &none &none &none &none &kp HOME &kp PG_DN &kp PG_UP &kp END &none &trans
   &trans &trans &trans &none &trans &none &none &trans &trans &trans &trans &trans
                        >;
                };
        };
};